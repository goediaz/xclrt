(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const init = require('./js/cart');

init.drawProductsTable('product-list-container');
},{"./js/cart":2}],2:[function(require,module,exports){
const shoppingCartModule = require('./shopping-cart');
const storeModule = require('./store');

/* eslint-disable no-undef */
function countTotalItems() {
  let total = 0;
  for (let i = 0; i < storeModule.store.cart.products.length; i += 1) {
    total += storeModule.store.cart.products[i].quantity;
  }
  return total;
}

const createDomElment = (nodeName, nodeContent, nodeClass, nodeAttr, attrValue) => {
  const newNode = document.createElement(nodeName);
  newNode.innerText += nodeContent;

  if (nodeClass) {
    newNode.classList.add(nodeClass);
  }

  if (nodeAttr) {
    newNode.setAttribute(nodeAttr, attrValue);
  }

  return newNode;
};

function updateShoppingCartView() {
  const node = document.getElementById('cart_overview');
  const totalItems = countTotalItems();
  const overallCost = shoppingCartModule.getOverallCost();
  const totalCostNoDiscount = shoppingCartModule.getCostWithNoDiscount();
  node.innerHTML = `${totalItems} Items <strong class="products__total-qty">${totalCostNoDiscount} €<strong>`;
  const costNode = document.getElementById('total-cost');
  costNode.innerHTML = `TOTAL COST <strong class="cart__total-cost">${overallCost} €<strong>`;
  const cartContainer = document.getElementById('cart_products');

  cartContainer.innerHTML = '';
  if (storeModule.store.cart.products.length > 0) {
    storeModule.store.cart.products.forEach((item) => {
      const moneySaved = (item.product.price * item.quantity - item.totalPrice);
      if (moneySaved !== 0) {
        const promo = storeModule.store.promotions.find(({ code }) => code === item.product.code);
        const subcontent = `<ul class='cart__products-overview-list'><li>${promo.name}</li>  <li>${moneySaved} € </li></ul>`;
        const itemNode = createDomElment('li', '', 'cart__products-item', '');
        itemNode.innerHTML = subcontent;
        cartContainer.append(itemNode);
      }
    });
  }
}

const handleSubstract = (id, qty, price) => {
  const input = document.getElementById(`input-${id}`);
  const newQty = +qty > 0 ? qty - 1 : qty;
  input.value = newQty;
  const refElement = document.getElementById(`total-price-${id}`);
  refElement.innerText = +input.value * +price;
  shoppingCartModule.removeFromShoppingCart(id, newQty);
  updateShoppingCartView();
};

const handleAdd = (id, qty, price) => {
  const input = document.getElementById(`input-${id}`);
  const newQty = +qty + 1;
  input.value = newQty;
  const refElement = document.getElementById(`total-price-${id}`);
  refElement.innerText = +input.value * +price;
  shoppingCartModule.addToShoppingCart(id, newQty);
  updateShoppingCartView();
};

// FIXME
// This is a way long mehtod, due the quantity of html elements, would be good to see if I can
// reduce the quantity of lines.
function drawProductsTable(nodeContainer) {
  storeModule.store.products.forEach((product) => {
    const mainNode = createDomElment('li', '', 'products__item', 'id', `item-${product.id}`);
    const figure = createDomElment('figure', '', 'products__item-image-container', '', '');
    const imageNode = createDomElment('img', '', 'products__item-image', 'src', `./public/images/${product.id}.jpg`);
    const innertCaption = createDomElment('strong', `Product Code ${product.code}`, '', '', '');
    const caption = createDomElment('span', `${product.name}`, 'products__item-name', '', '');
    const counter = createDomElment('div', '', 'products__item-counter', '', '');
    const buttonPlus = createDomElment('button', '+', 'products__item-add', 'id', `button-${product.id}-plus`);

    const inputQty = createDomElment('input', '', 'products__item-quantity', 'id', `input-${product.id}`);
    inputQty.value = 0;
    inputQty.setAttribute('disabled', true);
    const buttonSubs = createDomElment('button', '-', 'products__item-remove', 'id', `button-${product.id}-subs`);

    const productPrice = createDomElment('div', product.price, 'products__item-price', '', '');
    const productTotal = createDomElment('div', `${inputQty.value * product.price} €`, 'products__item-price', 'id', `total-price-${product.id}`);

    counter.appendChild(buttonSubs);

    buttonSubs.onclick = () => handleSubstract(product.id, inputQty.value, product.price);
    buttonPlus.onclick = () => handleAdd(product.id, inputQty.value, product.price);
    counter.appendChild(inputQty);
    counter.appendChild(buttonPlus);
    caption.appendChild(innertCaption);
    figure.appendChild(imageNode);
    figure.appendChild(caption);
    mainNode.appendChild(figure);
    mainNode.appendChild(counter);
    mainNode.appendChild(productPrice);
    mainNode.appendChild(productTotal);
    const principalNode = document.getElementById(nodeContainer);
    principalNode.appendChild(mainNode);
    updateShoppingCartView();
  });
}

exports.drawProductsTable = drawProductsTable;
},{"./shopping-cart":4,"./store":5}],3:[function(require,module,exports){
const products = [
  {
    id: 1, name: 'Goku POP', price: 5.00, code: 'GOKU'
  },
  {
    id: 2, name: 'Naruto POP', price: 20.00, code: 'NARU'
  },
  {
    id: 3, name: 'Luffy POP', price: 7.50, code: 'LUF'
  }
];

const cart = {
  products: [
  ]
};

const promotions = [
  {
    code: 'GOKU',
    name: '2x1 Goku POP Offer',
    price: 0.5,
    condition: 'fquantityEven'
  },
  {
    code: 'NARU',
    name: 'x3 Naruto POP Offer',
    price: 0.95,
    condition: 'threemore'
  }
];

exports.products = products;
exports.cart = cart;
exports.promotions = promotions;
},{}],4:[function(require,module,exports){
const storeModule = require('./store');
const productsModule = require('./products');

function getPriceOrDiscount(product, qty = 1) {
  const promo = productsModule.promotions.find((promotion) => promotion.code === product.code);
  let value = 0;
  if (promo) {
    switch (promo.code) {
      case 'GOKU':
        if (qty % 2 === 0) {
          value = (product.price * qty) * promo.price;
        } else {
          value = qty === 1
            ? (product.price * qty)
            : ((product.price * (qty + 1)) / 2);
        }
        break;
      case 'NARU':
        if (qty > 2) {
          value = product.price * qty * promo.price;
        } else {
          value = product.price * qty;
        }
        break;
      }
  } else {
    value = product.price * qty;
  }
  return value;
}

function removeFromShoppingCart(productId, qty) {
  const cartProducts = storeModule.store.cart.products.filter((item) => item.product.id !== productId);
  const productToSubstract = storeModule.store.products.find((product) => product.id === productId);

  if (qty > 0) {
    const item = {
      product: productToSubstract,
      quantity: qty,
      totalPrice: getPriceOrDiscount(productToSubstract, qty)
    };
    const updatedCartProducts = [...cartProducts, item];
    storeModule.store.cart = { products: updatedCartProducts };
  } else {
    storeModule.store.cart = { products: cartProducts };
  }
}

function addToShoppingCart(productId, qty) {
  const existingCartProduct = storeModule.store.cart.products.find(({ product }) => product.id === productId);
  const productToAdd = storeModule.store.products.find((product) => product.id === productId);

  if (!existingCartProduct) {
    storeModule.store.cart.products = [
      ...storeModule.store.cart.products,
      { product: productToAdd, quantity: qty, totalPrice: getPriceOrDiscount(productToAdd, qty) }
    ];
  } else {
    let newCartProducts = storeModule.store.cart.products.filter((item) => item.product.id !== productId);
    const item = {
      product: productToAdd,
      quantity: qty,
      totalPrice: getPriceOrDiscount(productToAdd, qty)
    };
    newCartProducts = [...newCartProducts, item];
    storeModule.store.cart = { products: newCartProducts };
  }
}

function getOverallCost() {
  let totalCost = 0;
  for (let i = 0; i < storeModule.store.cart.products.length; i += 1) {
    totalCost += storeModule.store.cart.products[i].totalPrice;
  }
  return totalCost;
}

function getCostWithNoDiscount() {
  let totalCost = 0;
  for (let i = 0; i < storeModule.store.cart.products.length; i += 1) {
    totalCost += storeModule.store.cart.products[i].product.price * storeModule.store.cart.products[i].quantity;
  }
  return totalCost;
}

exports.getPriceOrDiscount = getPriceOrDiscount;
exports.removeFromShoppingCart = removeFromShoppingCart;
exports.addToShoppingCart = addToShoppingCart;
exports.getOverallCost = getOverallCost;
exports.getCostWithNoDiscount = getCostWithNoDiscount;
},{"./products":3,"./store":5}],5:[function(require,module,exports){
const productsElements = require('./products');

function getProducts() {
  return productsElements.products;
}
function getPromotions() {
  return productsElements.promotions;
}
function getCart() {
  return productsElements.cart;
}

const store = {
  products: getProducts(),
  totalCost: 0,
  currentPage: 1,
  cart: getCart(),
  promotions: getPromotions()
};

exports.store = store;
},{"./products":3}]},{},[1]);
